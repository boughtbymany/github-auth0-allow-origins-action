jest.mock('@actions/core')
//import { ManagementClient } from 'auth0'

import { getInput, info, setFailed, setOutput } from '@actions/core'
import { run } from '.'
import { FakeInput, getFakeInput } from './test-helpers/fake-input'

const managementClientMock = jest.fn()
const getClientMock = jest.fn()

jest.mock('auth0', () => {
  return {
    ManagementClient: (opts: any) => {
      managementClientMock(opts)
      return {
        getClient: (params: any) => {
          return getClientMock(params)
        },
      }
    },
  }
})

describe('github auth0 allow origins action', () => {

  const getInputMock = jest.mocked(getInput)
  const setFailedMock = jest.mocked(setFailed)
  const setOutputMock = jest.mocked(setOutput)
  const infoMock = jest.mocked(info)
  //const managementClientMock = jest.mocked(ManagementClient)

  //const auth0ManagementClient = jest.mock('ManagementClient')

  afterEach(() => {
    jest.restoreAllMocks()
  })

  test('basic sanity', async () => {

    const inputConfig: FakeInput = {
      'auth0-domain': 'dummy.domain',
      'auth0-client-id': 'client12345678',
      'auth0-management-client-id': 'managementclient12345678',
      'auth0-management-client-secret': 'managementclient12345678',
      'deploy-url': 'https://test.dummy.deploy.url',
    }

    getInputMock.mockImplementation((name) => {
      return getFakeInput(inputConfig, name)
    })
        
    await run()


    expect(managementClientMock).toBeCalledWith({
      domain: '',
      clientId: '',
      clientSecret: '',
      scope: 'read:clients'
    })

    expect(getClientMock).toBeCalledWith({      
      client_id: ''
    })

  })

})
